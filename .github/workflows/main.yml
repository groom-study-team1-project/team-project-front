name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: CI=false npm run build

      - name: Create SSH directory
        run: mkdir -p ~/.ssh

      - name: Set SSH directory permissions
        run: chmod 700 ~/.ssh

      - name: Decode SSH key
        run: echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa

      - name: Set SSH key permissions
        run: chmod 600 ~/.ssh/id_rsa

      - name: Add EC2 to known hosts
        run: ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo Connection Successful"

      - name: Clean Target Directory on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "\
            if [ -d '${{ secrets.TARGET_DIR }}' ]; then \
              sudo rm -rf ${{ secrets.TARGET_DIR }}/*; \
            else \
              echo 'Target directory does not exist, skipping clean-up.'; \
            fi"

      - name: Create Target Directory on EC2
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /home/${{ secrets.EC2_USER }}/temp_build"

      - name: Deploy to EC2
        run: |
          scp -i ~/.ssh/id_rsa -r ./build/* ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/temp_build
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          sudo mv /home/${{ secrets.EC2_USER }}/temp_build/* ${{ secrets.TARGET_DIR }}
          sudo chown -R www-data:www-data ${{ secrets.TARGET_DIR }}
          sudo chmod -R 755 ${{ secrets.TARGET_DIR }}
          EOF

      - name: Check Application Status
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "sudo systemctl status my-app || true"
